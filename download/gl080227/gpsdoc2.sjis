
ＧＰＳロガー　オペレーションマニュアル

■システムの概要

　このＧＰＳロガーは、モデルロケットに搭載され、ＧＰＳによってモデルロケットの三次元の飛行経路を観測・記録します。ＧＰＳロガーは、以下の３つの部分から構成されています。

　観測記録部は、モデルロケットに搭載する部分です。防水のためのフィルムケースに格納され、ＧＰＳから受信したデータをメモリカードに記録します。

　充電部は、観測記録部のバッテリーを充電する部分です。交流１００Ｖの電源を使用して、８時間のタイマーによりバッテリーを充電します。

　解析表示部は、観測記録部によって記録されたメモリカードのデータを解析し、画面に表示する部分です。この部分はサーバソフトウェアとして提供され、ユーザーのＰＣからネットワーク経由でアクセスします。なお、サーバソフトウェアをユーザーのＰＣ上にインストールし、スタンドアローンで動作させることも可能です。

■観測記録部の仕様

観測方法	１２チャンネルＧＰＳ
観測データ	緯度、経度、高度、衛星捕捉数、時刻
準備時間	最大１０分
記録媒体	ｍｉｎｉ‐ＳＤカード（付属）　１０分版×１、１時間版×１
記録形式	ＦＡＴ１６（制限あり）
記録間隔	１秒ごと
入出力	メモリカードスロット×１、ＬＥＤ×１、充電／テスト用コネクタ×１
電源	内蔵バッテリー（３．６Ｖ　７０ｍＡｈ）
動作時間	２０分
形状	直径３３ｍｍ×高さ５３ｍｍの円筒形
重量	３５ｇ（メモリカードを含む）

■充電部の仕様

電源	交流１００Ｖ
充電時間	８時間（０．２Ｃ充電）
充電制御	電流制限抵抗、メカニカルタイマー
入出力	充電コネクタ×２

■解析表示部の仕様

動作環境	インターネットブラウザ、ｍｉｎｉ‐ＳＤカードインターフェース、カラーディスプレイ
サーバの動作環境	ＰＨＰ４＋ＧＤ２が使用できる環境（典型的には、ＷｉｎｄｏｗｓまたはＬｉｎｕｘ上でａｐａｃｈｅを使用）
入出力	記録ファイルの入力、画像データ（ＰＮＧ）の出力、ＰＤＦファイルの出力（オプション）
出力内容	位置と高度の軌跡を立体表示した俯瞰図、緯度・経度・高度・衛星捕捉数を時間軸にそって表示したグラフ

■使用方法

　以下の手順でＧＰＳロガーを使用します。

・充電

観測記録部のジャンパスイッチがＯＦＦになっていることを確認します。
観測記録部と充電部のコネクタを接続します。
タイマーを８時間にセットします。
充電部をコンセント（交流１００Ｖ）に接続します。
タイマーが終了したら充電完了ですので、コネクタを外します。

・動作テスト

メモリカードをメモリカードスロットに挿入します。
観測記録部のジャンパスイッチをＯＮにします。
	→少しして、ＬＥＤが１秒ごとに点滅します。
動作を確認したら、ジャンパスイッチをＯＦＦにします。

・観測記録の開始

観測記録部のジャンパスイッチをＯＮにします。
	→少しして、ＬＥＤが１秒ごとに点滅します。
１０分以内に衛星が捕捉され、現在位置がメモリカードに記録されていきます。

　１０分版のメモリカードを使用した場合には、衛星捕捉まではＬＥＤが短く点滅し、メモリカードへの記録はおこなわれません。衛星を捕捉すると、通常の点滅になり、メモリカードへの記録がおこなわれます。

・観測記録の終了

ジャンパスイッチをＯＦＦにします。
メモリカードをメモリカードスロットから取り出します。持ち上げてロックを外し、引き抜いてください。

・解析表示

メモリカードをユーザーのＰＣに接続します。
	→環境によっては、メモリカードに関する表示がおこなわれます。
インターネットブラウザを起動し、サーバソフトウェアのＵＲＬを入力します。
	→データの登録画面が表示されます。
メモリカードのデータ（ＧＰＳ．ＬＯＧ）を選択し、送信します。
	→解析画面が表示されます。
メモリカードを停止します。
	→メモリカードが取り出せるようになります。
メモリカードをユーザーのＰＣから取り出します。

■解析画面の見方

　解析画面では緯度と経度は、データ全体の最大値と最小値の中間をゼロとして、メートルに変換されて表示されます。緯度がｙ座標、経度がｘ座標になります。

　下側には、時間の経過による、緯度・経度・高度・衛星捕捉数の変化が、グラフとして表示されます。記録開始が左端で、縦線は１分ごとに引かれています。中央がゼロで、横線は１００ｍごとに引かれています。経度（ｘ）は赤の線で、緯度（ｙ）は緑の線で、高度は青の線で示されています。衛星捕捉数は黄色の面で示され、下端がゼロ、中央が６、上端が１２です。

　上側には、位置と高度の変化が俯瞰図で表示されています。灰色の交差している線は地表（高度ゼロ）を示し、１００ｍ間隔で引かれています。緯度・経度・高度の変化が赤の線で、それを地表に投影した緯度・経度の変化が黒の線で示されています。

■トラブルシュート

　観測記録部で異常が検出された場合には、ＬＥＤが以下のように点滅しますので、点滅の回数を数えてください。２桁のエラー番号の場合は「十の位→短い休み→一の位→長い休み」のように示されます。１桁のエラー番号の場合は「一の位→長い休み」をくり返します。ＧＰＳロガー用に初期化されていないメモリカードを使用すると、このようなエラーになります。

１１	メモリカードの認識（ＣＭＤ０）でエラーになりました。
１２	メモリカードの認識（ＣＭＤ１）でエラーになりました。
１３	メモリカードの認識（ＢＬＥＮ）でエラーになりました。
２	ファイルの最後まで記録したので、終了しました。
３１	メモリカードの読み込み（ＭＢＲ）でエラーになりました。
３２	メモリカードのフォーマット（Ｍ‐ＳＩＧ）が正しくありません。
４１	メモリカードの読み込み（ＰＢＲ）でエラーになりました。
４２	メモリカードのフォーマット（ＦＡＴ１６）が正しくありません。
４３	メモリカードのフォーマット（Ｐ‐ＳＩＧ）が正しくありません。
５１	メモリカードの読み込み（ＲＤＥ）でエラーになりました。
５２	記録するファイル（ｇｐｓ＊．ｌｏｇ）がありません。
５３	記録するファイル（ｇｐｓ＊．ｌｏｇ）が先頭１６エントリにありません。
６１	ファイルの書き込みでエラーになりました。
７１	メモリカードの読み込み（ＦＡＴ）でエラーになりました。
７２	メモリカードのフォーマット（ＦＡＴ０）が正しくありません。
７３	メモリカードに不良セクタがあります。

　それ以外の場合は以下のように判断してください。

１秒ごとに短く点滅する	衛星捕捉を待っており、正常な状態です。
１秒ごとに点滅する	観測記録がおこなわれており、正常な状態です。
ＯＮにしたときに点灯したままになる	メモリカードが入っていないか、接触不良です。
一瞬点滅したあと消灯したままになる	ＧＰＳモジュールからデータが受信できません。
途中から点灯したままになる	バッテリーがなくなりました。
途中から暗く点灯したままになる	バッテリーがなくなりました。

　解析表示部の異常は、以下のように判断してください。

サーバに接続できない	ネットワークが動作しているか、ＵＲＬが間違っていないか、サーバが動作しているか、サーバソフトウェアがインストールされているかを確認してください。
メモリカードが読めない	メモリカードを接続したままＰＣを起動すると認識しないことがあります。また、環境によっては認識に時間がかかることがあります。
画面にソースコードが表示される	ＰＨＰがインストールされているか確認してください。
画面にエラーが表示される	ＵＲＬが間違っていないか、ファイルやディレクトリのパーミションが設定されているか、ＧＤやＰＤＦＬＩＢがインストールされているか確認してください。
表示されるグラフが異常	観測記録がうまくできなかった可能性があります。

■使用上の注意

　メモリカードはＧＰＳロガー用に初期化したものを使用してください。

　ＧＰＳモジュールの金属部分はマイナス端子になっていますので、他の部品に接触させないようにしてください。

　充電コネクタを接続するときには、コネクタの向きに注意してください。

■

製造マニュアル

■部品表

観測記録部

バッテリー	３ＨＢ７０	１１．２ｇ
ＧＰＳモジュール	ＧＨ‐８０	１０．６ｇ
フィルムケース	富士写真フィルム製	５．７ｇ
プリント基板	‐	１．３ｇ
メモリカードアダプタ	ｍｉｎｉＳＤ→ＳＤ	１．１ｇ
メモリカード	ｍｉｎｉＳＤカード	０．９ｇ
マイコン	ＰＩＣ１２Ｃ５０９Ａ
Ｃ	０．１μＦ
Ｒ	２００Ω
ＬＥＤ	‐
ジャンパスイッチ	２Ｐ
コネクタ	ＳＭ０９Ｂ‐ＳＳＲ‐Ｈ‐ＴＢ
ピンヘッダ	３×１Ｐ
スズめっき線	

充電部

タイマー	ＡＣ１００Ｖ　８時間
ＡＣアダプタ	ＡＣ１００Ｖ→ＤＣ１２Ｖ
ＤＣジャック	
Ｒ	４７０Ω×２
ピンヘッダ	４×１Ｐ
コネクタ	３Ｐ×２
コネクタ	４Ｐ×１
リード線	
熱収縮チューブ	

■基板の仕様

　基板は軽量化のため０．８ｍｍ厚にしましたが、これは重要ではありません。パターンが複雑なのは、ピン配置を試作版（片面基板）と同じにしたためです。大きい丸は、当初ボタン電池を使う計画だった名残りです。

■ＤＩＰ版／表面実装版

　基板は、ＤＩＰ部品でも表面実装部品でも取りつけられるようになっています。

　マイコン（ＰＩＣ１２Ｃ５０９Ａ）は、ＤＩＰ版の場合は外側の穴を、表面実装版であれば内側のパターンを使ってください。

　ＧＰＳコネクタは、ＤＩＰ版の場合は４Ｐのピンヘッダを、表面実装版であればパターンを使ってください。ＤＩＰ版の場合、ＧＰＳモジュールからの配線を４Ｐのコネクタに変換する必要があります。

　ＣＲとＬＥＤは、ＤＩＰ部品と表面実装部品のどちらでも使えるようになっています。Ｃについては穴の間隔も２種類用意してあります。

■プログラムの書き込み

　マイコンは、プログラムを書き込んだ状態で取りつけてください。ＤＩＰ版の場合はＩＣソケットを使用することもできます。

　なお、コネクタとメモリカードに何も接続しない状態であれば、書き込みに必要な端子はオープンになりますので、実装後の書き込みも可能です。なお、筆者の環境ではＶ＋（ピン１）をライターに接続した状態では、パスコンの影響かうまく読み書きできませんでした。

■レギュレータ

　設計変更の経緯により、３端子レギュレータのパターンが残っています。単３電池などで駆動する場合には、３端子レギュレータを実装すると３．３Ｖを作ることができます。電源は充電コネクタから供給します。

　３端子レギュレータのピン配置に合わせられるように、２種類の穴が用意してあります。センターグランドのタイプであれば、表面実装にも対応しています。

■メモリカードアダプタ

　端子部にスズめっき線を半田付けしておき、これを基板に半田付けします。全部の部品の半田付けが終わったら、スズめっき線の部分で２つに折るようにして、基板に重ねます。

　メモリカードアダプタには、熱に弱い種類もあるようなので、注意してください。

■バッテリーの実装方法

　現状の基板では、バッテリーの足をうまく曲げる必要があります。面倒であれば、メモリカードアダプタのマイナス端子につないでしまっても構わないと思います。

■充電部

　ＤＣジャックのマイナス端子を少し細く加工して、４Ｐのピンヘッダを差し込み、半田付けして固定します。ＤＣジャックのプラス端子から、ピンヘッダの両側の端子に、それぞれ抵抗を半田付けします。絶縁のため、この状態で熱収縮チューブをかけるとよいでしょう。あとはコネクタを配線して完了です。観測記録部のコネクタは、中央のピンがマイナスです。

　タイマーは、家庭用の１２時間タイマーを使いました。「オフのみ」が指定できるタイプであれば、２４時間タイマーも使用できます。

■メモリカードの初期化

　メモリカードはあらかじめＦＡＴ１６でフォーマットし、ｇｐｓ．ｌｏｇという記録用ファイルを格納しておきます。ｇｐｓ．ｌｏｇは自動的には大きくならないので、あらかじめ記録するサイズに合わせて大きくしておきます。

　ｇｐｓ．ｌｏｇはルートディレクトリの最初の１６エントリ以内に置く必要がありますが、フォーマット直後に１ファイルだけコピーすれば、問題ありません。また、ＦＡＴ１６でフォーマットする環境が用意できない場合は、確実にＦＡＴ１６でフォーマットされている２５６ＭＢのメモリカードを使用する方法もあります。

　ファイル名がｇｐｓｄ．ｌｏｇになっていると、衛星捕捉まではメモリカードへの記録がおこなわれません。

■サーバ環境の構築

　ＰＨＰとＧＤ２が動作するＨＴＴＰサーバが必要です。無償で入手できるものとしてはＡｐａｃｈｅがあり、商用サーバなどで数多くの実績があります。Ｗｉｎｄｏｗｓ版もＵＮＩＸ版もありますので、環境に合ったものを選択してください。なお、いわゆるホスティングサービスでは、これらがはじめから提供されているものも多数あります。

ｈｔｔｐ：／／ｗｗｗ．ａｐａｃｈｅ．ｏｒｇ／
ｈｔｔｐ：／／ｗｗｗ．ｐｈｐ．ｎｅｔ／

　ＰＨＰはサーバサイド言語で、ＨＴＴＰサーバからＣＧＩで起動するか、またはＨＴＴＰサーバにモジュールを組みこんで使用します。また、ＰＨＰにはＧＤエクステンションを組みこんでおく必要があります。ここまでの作業は、インターネットや書籍にさまざまな情報が出ていますので、参照してください。

　設定が正しければ、ｇｌｏｇａｎａ．ｐｈｐをＨＴＴＰサーバからアクセスできるディレクトリに置き、ｗｅｂブラウザからアクセスすると、解析画面が表示されます。

■

設計メモ

■開発の動機

　このシステムは、２００４年８月に実施されたＳＷＥＳＴ６会場で、Ｓｕｒｖｅｙｏｒチームが複雑な設計のＧＰＳロガーの調整に苦労していたのを見て、もっと単純で誰にでも作れるＧＰＳロガーを設計しようと考えたことがきっかけとなって生まれました。

　そのとき苦労していたのは、フラットパッケージの半田付けと、ＤＣ‐ＤＣコンバータのラッチアップでした。ＧＰＳロガーを、誰でも製造できるように再設計（リファクタリング）することが、このプロジェクトの目的です。

■要件

　ＧＰＳロガーは、モデルロケットの飛行径路を計測するのに使用します。モデルロケットは、火薬を燃焼して得られるガスの噴射により、高度１００ｍ程度まで上昇します。その後、モデルロケットはパラシュートを開いて地上または水上に降下します。ＧＰＳロガーを使うと、高度も正確に測定することができます。

　モデルロケットに搭載する以上、ＧＰＳロガーはできるだけ小さく、軽いことが望ましいのですが、前回は防水を兼ねたフィルムケースを使用していましたので、このプロジェクトでも同じものを使用することにしました。大昔の雑誌の記事（初歩のラジオ？）で、コニカ（当時はサクラカラー）よりもフジのフィルムケースの方が防水性が高いと読んだ記憶があり、富士写真フィルムの低感度用フィルムケースを使用しています。

　電源は内蔵する必要がありますので、電池を使用します。

　それ以外の要件として、作りやすいことと、部品が入手しやすいことを重視しました。なお、ＧＰＳモジュールの部品については、前回と同じものを使用しています。

■設計コンセプト

　要件を満たすために、どのような方針で設計をおこなうかですが、マルチメディアカード、またはその上位規格のＳＤカードを使用するという方針を仮定しました。これは以前「マルチメディアカードのＳＰＩモードはクロック同期シリアルでアクセスできるので制御が簡単」と知人から聞いていたためです。個人的に経験を積んでおきたかったというのもあって、資料を調査し、採用しました。

　サイズ的にも合格のはずだったのですが、適当なコネクタを手配し、カードを差してフィルムケースに入れてみたところ、厳しいことがわかりました。コネクタの作りによって大きさが違うのだと思いますが、部品が手配しにくくなるのは要件に反します。そこで、携帯電話やＭＰ３プレーヤー向けに出回っているｍｉｎｉ‐ＳＤカードを使用し、ＳＤカードへの変換アダプタそのものをソケットにするように考えました。ｍｉｎｉ‐ＳＤカードは、アダプタ付きの製品が各社から提供されているため、入手は容易です。

　なお、本システムではｍｉｎｉ‐ＳＤカードをマルチメディアカードの上位互換品として使用しているのですが、以降の説明ではこれらを単に「ＳＤカード」と呼ぶことにします。

　フラッシュメモリＬＳＩを基板に実装した場合とは異なり、ＳＤカードは着脱可能ですから、ＧＰＳロガーは記録機能だけにし、別の機器にＳＤカードを差して読み出すことも可能になります。これにより、ＧＰＳロガーの単純化・軽量化が見込めます。

　ＳＤカードはＰＣでも読めるのですが、ＦＡＴなどの標準的なフォーマットでない場合には、ＰＣ用の専用ソフトウェアを開発する必要があります。これは、ＰＣの環境の変化（ＯＳのバージョンアップなど）によって動かなくなる危険があり、保守性の低下につながります。一方、もしＦＡＴで書き出せれば、どんなＰＣでも読み出せることになり、保守性とシステムの単純化が期待できます。そこで、何らかの形でＦＡＴを書き出すことが目標になります。また、分析システムがＰＣに依存してしまったのでは意味がないので、分析システムを動かすプラットフォームについての検討も必要です。

■設計の詳細

電源

　今回の設計では昇圧はおこなわず、３．３Ｖのレギュレータの使用もしくは３．６Ｖの直接入力としています。ＧＰＳモジュールは３．３Ｖ程度を必要とし、１００ｍＡ近く消費するので、当初は３Ｖ２００ｍＡｈのコイン電池（ＣＲ２０３２）を２つ直列にして、レギュレータで３．３Ｖにする方針でいました。基板を起こした後に、コイン電池の放電能力について指摘をいただき、大電流放電が可能なＮｉＭＨ電池に変更しました。最終的に、ＳＡＮＹＯの３ＨＢ７０（３．６Ｖ　公称容量７０ｍＡｈ）または、ＶＡＲＴＡの互換品を使うことにしました。いずれも、通信販売などで幅広く入手できます。大電流放電なので、３０分〜１時間で電池がなくなる計算になります。

　充電は、１２ＶのＡＣアダプタから電流制限抵抗を通して８時間充電するという単純なものです。

記録メディア

　ｍｉｎｉ‐ＳＤカードは３２〜５１２ＭＢのものが、各社から販売されています。ＰＣショップなどで購入できます。

マイコン

　個人的に実績のあるＰＩＣの中で３．３Ｖが使えるものとなると、ＰＩＣ１２Ｃ５０９Ａが思いつきます。これは８ピンのマイコンで、４ＭＨｚのＲＣクロックを内蔵しているため、部品点数が少なくできるという利点があります。比較的古く、機能も少ないのですが、フラットパッケージもあり、多数の店舗で入手できます。８ピンのうち電源は２ピンで、ＧＰＳモジュールとの送受信に２ピン、ＳＤカードのアクセスに４ピンを割り当てることになります。

ソフトウェアの機能

　ＰＩＣ１２Ｃ５０９ＡにはＲＡＭが４１バイトしかないため、普通のやり方ではＦＡＴを扱うことができません。つまり、１セクタ５１２バイトをメモリ上に読み込み、一部を変更してから書き戻すという処理をおこなうことができません。そこで、あらかじめＰＣを使ってメモリカード上にファイルを用意しておき、このファイルのデータ部分を１セクタ単位で更新していく方法を取ることにしました。

　ＧＰＳモジュールからの受信はシリアル（９６００Ｎ８１）ですが、これの受信バッファも取れません。こちらについては、ＧＰＳモジュールの送信が間欠的であり、１秒に一度、何十バイトかがまとめて来るのを利用して対応します。具体的には、受信したデータはそのままセクタデータとしてＳＤカードに書き出します。送信が途切れたところで、ダミーデータを書き込んでセクタの残りを埋め、次のセクタに進み、次のデータの受信を待ちます。ＳＤカードは、セクタの途中では書き込み待ちは発生しませんので、シリアルデータをそのまま書き込んでも取り落としはなく、データの途中でセクタが終わることもありません。

　なおＧＰＳモジュールから来るデータはバイナリですが、デバッグのしやすさ、ダミーデータの識別のしやすさを考え、データは１６進ダンプ形式でテキストとして書き込みます。

ＬＥＤ表示

　ＰＩＣ１２Ｃ５０９Ａの入出力はすべて使用してしまっており空きがないのですが、動作の表示がほしいところです。そこで、ＳＤカードのＣＳ端子にＬＥＤをつなぎ、アクセス中は点灯するようにしました。

　何らかの異常時には点滅回数でエラーコードを表示するようにしています。これは昔、自動車整備の雑誌で読んだ、自動車のエンジン制御コンピュータのエラーログ機能を参考にしたものです。

分析システムのプラットフォーム

　分析システムはＧＵＩ環境上で使用したいわけですが、普及しているＷｉｎｄｏｗｓマシンは将来のバージョンアップなどに心配があり、一方でオープンなＬｉｎｕｘは誰でも簡単に利用できるとは言い切れない状況です。モデルロケットの打ち上げ現場にＰＣを持ちこむことにも不安があります。そこで、比較的後発のサーバサイドスクリプトであるＰＨＰを使用し、インターネットブラウザを使ってアクセスする方法を採用しました。

　ＰＨＰは無償で利用できるサーバサイド言語で、Ａｐａｃｈｅなどの主要なＨＴＴＰサーバから利用することができます。ＷｉｎｄｏｗｓにもＬｉｎｕｘにも対応しています。標準でＰＨＰが利用できるホスティングサービスも多数あり、公開ディレクトリに「．ｐｈｐ」のファイルを置くだけで動作させることができます。このため、クライアントはインターネットブラウザさえ動作すればＰＣでもＭａｃでもケータイでもよく、サーバ側は最悪でもＰＣ＋Ｌｉｎｕｘ＋Ａｐａｃｈｅ＋ＰＨＰとすることで確実に構築することができます。また、誰かが構築したサーバが公開されていれば、クライアント側は何もインストールしなくてもそこにアクセスするだけで動作しますので、プラットフォームへの依存が最小限に抑えられます。

　ＰＨＰの言語仕様は、連想配列あり、クラスあり、多数の拡張モジュールありで、今回のようにファイルアップロード処理をおこなったり、画像の動的生成をおこなったりすることも簡単にできます。たとえば秋月電子通商のオンラインショップ（ｈｔｔｐ：／／ａｋｉｚｕｋｉｄｅｎｓｈｉ．ｃｏｍ／）もＰＨＰで作られているようです。

その他

　ＧＰＳモジュールは、ＧＨ‐８０という小型のものを用意していただきました。

　作りやすさを考え、ＤＩＰ部品のみでも作れるようにしました。コストは圧縮したいので、基板は共用になっています。

■試作品

　最初に、ＳＤカードへのアクセスを検証するための試作基板を作りました。シリアルはＰＣに接続し、入力したアドレスのセクタダンプなどをおこなうものです。その後、ＭＢＲ（マスターブートレコード）などの管理領域の読み込みをテストし、最終的にはメモリカードの先頭ファイルをシリアルに出力するテストをおこないました。ここまでくれば、読み込みを書き込みに変更することで書き込みが可能になります。

　ＧＰＳモジュールとの通信は、まずレベルコンバータ（トランジスタ２個）を使ってＰＣに接続してテストし、その後ＰＩＣに持っていきました。

　ＧＰＳモジュールの感度が低い問題が発覚し、受信データをＬＣＤに表示するためのボードも用意しました。ＬＣＤモジュールは５Ｖなので、ＰＩＣ１６Ｆ８４Ａを使用しました。

　プリント基板のアートワークですが、試作品と同じピン配置にしたため、電源が引き回されて完成度が低くなっています。当初はコイン電池２個を直列にして６Ｖを得る考えだったため、３端子レギュレータのパターンが残っています。

■ＰＩＣによるＦＡＴアクセス

　ＰＩＣ１２Ｃ５０９Ａはメモリが少ないため、セクタのデータを１バイトずつ読み込みながらのデータ処理と、１セクタまとめてのデータ書き込みしかできません。ＳＤカードのブロック長設定機能を使い、１セクタ＝１バイトにする方法も考えましたが、あらゆるＳＤカードでサポートされているか自信がなかったこと、シリアルの受信速度に追いつけない可能性があることを理由に見送りました。ちなみに、ＰＩＣ１２Ｃ５０９Ａにはシリアル通信のためのハードウェア（ＳＩＯ）もありません。

　管理領域の読み込みについては、セクタリードコマンドを発行した後、必要なデータが来るまで読み飛ばし、その後データを読んで判断し、残りを読み飛ばすという動作になります。ＦＡＴから次のエントリを読み出す処理は、たとえば最初の１０バイトは読み飛ばし、次の２バイトを読み込み、その後の５００バイトは読み飛ばす、という処理になります。１クラスタごとにこの処理をおこなうわけですが、ＳＤカードのアクセスは高速なので、シリアルデータが途切れたときに処理することで十分に間に合います。今回の実装では、このタイミングで２５０ミリ秒間ＬＥＤを消灯し、動作の表示をおこなっています。

　動作は、最初にＭＢＲ（マスターブートレコード）を読み込んでパーティションテーブルから最初のパーティションの開始セクタを取り出し、そこからＰＢＲ（パーティションブートレコードまたはＢＩＯＳパラメータブロック）を読み込みます。ＰＢＲを見て、ＦＡＴのセクタ数と、１クラスタあたりのセクタ数を得ます。ここからＲＤＥ（ルートディレクトリエントリ）のアドレスが求まり、最初の１セクタ（１６エントリ）の中から、書き込み対象のファイル名を見つけて、その先頭クラスタに書き込みを開始します。１クラスタが２セクタ以上ある場合は、セクタ数だけくり返します。１クラスタの書き込みが完了したら、ＦＡＴ（ファイルアロケーションテーブル）を読み込み、次のクラスタ番号を得て、書き込みを続けます。

　当然、この方法では管理領域の更新はできず、ファイルサイズや更新日時は元のままになります。またＦＡＴ１２については、１エントリが２セクタにまたがる場合があるため、対応を見送りました。

■その他

内蔵プルアップ抵抗

　ＰＩＣ１２Ｃ５０９Ａには、レジスタの設定で、いくつかのピンのプルアップ抵抗を有効にすることができます。そこで、ＧＰＳモジュールからのシリアル受信端子と、ＳＤカードからのデータ受信端子は、プルアップ抵抗の効くピンに割り当てることで、外部のプルアップ抵抗を節約することができます。

ワンタイムＲＯＭでの値の調整

　ＰＩＣ１２Ｃ５０９ＡのダイはＥＰＲＯＭになっており、開発は窓付きのパッケージ（ＪＷタイプ）を使用します。組み込み時には窓がなく消去できないワンタイム品を使うのですが、動作結果を見て値を調整したい場合もあります。

　このときは、ＥＰＲＯＭの先頭部分に「ｍｏｖｌｗ　７ｆｈ」を、続いて「ａｎｄｌｗ　０ｆｆｈ」をいくつか（筆者の場合は８〜１６個）置き、最後に「ｍｏｖｗｆ　ｐａｒａｍ０」のようにしてメモリに保存します。「ａｎｄｌｗ　０ｆｆｈ」のバイナリコードは０ｘｅｆｆで、動作は「Ｗ　＝＆　０ｘｆｆ」なのでＷレジスタの値は変化しません。したがってこのコード列は、最初に「ｍｏｖｌｗ　７ｆｈ」でＷレジスタが０ｘ７ｆになったあと、「ａｎｄｌｗ　０ｆｆｈ」の並びでは何も起きず、最後に「ｍｏｖｗｆ　ｐａｒａｍ０」でメモリに保存されることになります。この状態では、０ｘ７ｆがメモリに保存されます。

　値を変えたいときは、最初の「ａｎｄｌｗ　０ｆｆｈ」を「ｍｏｖｌｗ　３４ｈ」のように変更します。「ｍｏｖｌｗ　３４ｈ」のバイナリコードは０ｘｃ３４で、下位８ｂｉｔがオペランドになります。ＥＰＲＯＭは、初期化時は全ビットが１で、書き込むと０になりますので、０ｘｅｆｆに０ｘｃ３４を上書きすることが可能なのです。

　必要であれば、この並びを何組か持っておくと、たとえばクロックやタイマーの調整、ステッピングモータの速度の調整、ストロークの調整、ＩＤの書き換えなど、様々な目的に利用することができます。

逆差し対策

　私は基板側のコネクタはピンヘッダを使うことが多いのですが、逆差しを防止できないという欠点があります。そこで、逆差ししても逆電圧がかかったりしないように、配列を工夫しています。

ケータイ対応

　将来的に携帯電話からのインターネットアクセスを考慮して、衛星捕捉まで記録を開始しないモードを用意しました。ファイル名をｇｐｓｄ．ｌｏｇにするとこのモードになり、ファイルサイズが小さくて済むため、携帯電話のような低速通信の機器に向いています。ｍｉｎｉ‐ＳＤカードからのファイルアップロードができる携帯電話があれば、そのままサーバに送信して結果を分析することができます。

　また、ｉｍｅｘｐｏｒｔというディレクトリがあると、その中のｇｐｓ．ｌｏｇを検索するようになっています。これは、このディレクトリに添付ファイルを格納する携帯電話に対応するためのものです。

■トラブルの記録

ボタン電池の放電電流

　当初はコイン電池（金属リチウム一次電池）を使う予定だったのですが、ある方に指摘されてデータシートを調べたところ、連続した大電流放電は保証外のようでした。参考にしたデータシートを以下に示します。

ｈｔｔｐ：／／ｗｗｗ．ｇｐｂａｔｔｅｒｉｅｓ．ｃｏｍ．ｈｋ／ｐｉｃ／ＧＰＣＲ２０３２＿ＤＳ．ｐｄｆ

ｍｉｎｉ‐ＳＤアダプタの接続方法

　ｍｉｎｉ‐ＳＤアダプタはプラスチック製のため、熱に弱いという心配がありました。そこで、初めて導電性接着剤を使ってみたのですが、それなりにコツが必要なようです。修正ペン型のものは粘性が低く、ｍｉｎｉ‐ＳＤアダプタの端子ガードの下に浸透して端子間で短絡してしまいました。また、固まったあとは脆いようです。２液混合エポキシ型も試してみたのですが、結果的に原因不明で端子間の短絡が発生しました。

　導電性粘着剤を使用した銅箔テープ（シールド用）も試したのですが、安定した接続が得られませんでした。最終的に、製造マニュアルにあるように、半田付けで対応しました。

アドレスの制限

　ＰＩＣ１２Ｃ５０９Ａにはメモリが２バンクあります。０〜０ｘ１ｆと、０ｘ２０〜０ｘ３ｆで、それぞれ一部のみ実装されています。バンクはＦＳＲ（ファイルセレクトレジスタ）でアドレスを指定すると切り替わるのですが、このとき直接アドレスでアクセスするメモリにも影響があります。ＦＳＲを０ｘ３０にすると、０ｘ２０〜０ｘ３ｆのバンクが有効になるため、０ｘ１４のメモリへの読み書きは実際には０ｘ３４におこなわれます。このため、どちらのバンクからもアクセスする変数は、０〜０ｘｆの範囲に置く必要があります。なお、実際に使用可能なメモリは、７〜０ｘ１ｆと０ｘ３０〜０ｘ３ｆの４１バイトです。

　また、ＰＩＣ１２Ｃ５０９Ａには１０２４ワードのプログラムメモリがありますが、ｃａｌｌ先に指定できるアドレスは０〜０ｘｆｆという制限があります。また、ｇｏｔｏ先に指定できるアドレスは０〜０ｘ１ｆｆと０ｘ２００〜０ｘ３ｆｆのどちらかを、ステータスレジスタで切り替える仕組みになっています。サブルーチン類は先頭に固めておき、サブルーチン内のｇｏｔｏが正常に動作するよう、後半５１２ワードから呼び出す場合にはステータスレジスタを設定しておく必要があります。

　ちなみに、ＰＩＣ１２Ｃ５０９Ａではｃａｌｌのネストは２回までしかできません。メインルーチンからｒｓｓｅｎｄを呼び、その中からｒｓｗａｉｔを呼ぶことはできますが、それ以上呼ぶと、スタックが上書きされてしまい、メインルーチンに戻れなくなります。

ＰＩＣの内蔵クロック

　ＰＩＣ１２Ｃ５０９の内蔵４ＭＨｚクロックは、レジスタに微調整パラメータを書き込んで使用します。工場出荷時は５Ｖで校正された値が、プログラムメモリの最後に書き込まれ、電源投入時はここから実行が開始されます。

　シリアルの受信化け（ストップビットがビット７に出てしまう）が出たとき、このシステムの動作電圧である３．６Ｖではクロックが遅くなっているのではないかと想像したのですが、実際に計測してみたところ影響のあるような遅れは見られませんでした。これは結局、定数のミスと判明しました。

ＧＰＳモジュールの受信感度

　調査中ですが、このシステムでは、衛星捕捉能力について、ＧＰＳモジュールの実力が発揮できていないようです。電源の問題、シールドの問題などが考えられます。今までの実験結果は、以下の通りです。

■振り返り

　何もしなくても動くくらい、単純な設計を目指したのですが、ＧＰＳモジュールの感度の問題は原稿執筆時点では未解決です。それ以外については、ハードウェアの問題は致命的なものは避けられ、期待通りの結果が得られたと考えています。

■参考文献

　ＴＥＣＨ　Ｉ　Ｖｏｌ．１４　ＰＣカード／メモリカードの徹底研究（ＣＱ出版社）
　ＦＡＴ　ＦＳフォーマットの実装についての覚え書き（ｈｔｔｐ：／／ｗｗｗ．ｇｅｏｃｉｔｉｅｓ．ｃｏ．ｊｐ／ＳｉｌｉｃｏｎＶａｌｌｅｙ−ＰａｌｏＡｌｔｏ／２０３８／ｆａｔ．ｈｔｍｌ）

　その他、各種データシート・マニュアル

■

＃ｅｏｏ
